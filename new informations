### String interpolation 

c# =>$"{expression}"

js=> ${}

OOP
 Default constructor'ın görevi sınıfın içerindeki özelliklere ilk değer ataması yapılmadığında onların default değerlerini set etmektir. Şöyle düşünebilirsiniz; sınıf içerisinde string veri tipinde bir özellik varsa ve siz ilk değer atamasını yapmazsanız varsayılan kurucu onun atamasını arka planda null olarak yapar. Aynı integer tipinde bir özelliğin ilk değer atamasını 0 olarak yapar.

C# dilinde genellikle property'ler kullanılarak kapsülleme sağlanır. Java'da ise get ve set metodları kullanılarak bu işlevselliği gerçekleştirebilirsiniz.

Bir sınıfın static olamayan üyelerine nesneler aracılığıyla erişirken static olan metotlara ve özelliklere ise nesne oluşturmadan o sınıfın ismi aracılığıyla erişiriz.

Class lar referans tipli özellikler gösterir, Yapılar ise değer tipli özellikler gösterirler. En temel fark budur.

"enum" anahtar kelimesi enumeration yani numaralandırma kelimesinden gelir. Sayısal verilerı string ifadelerle saklamanızı sağlar. Okunabilirliğe katkısı da tam olarak burdan gelir diyebiliriz.

şimdi sen neden RestApi kullanıyorsun direkt veritabanı ile iletişime geç öyle de yaparız yok abicim o işler öyle olmuyor veri tabanının güvenliği önemli değil mi ? o yüzden restApi kullanacaksın. Api ne ile yazılmış bizim için önemli değil bu bir avantaj. 

restApi Rest mimariprensiplerini taşıyan api lardır. Yani restApi a istek gönderecek isen onun kurallarına göre istek göndermelisin. 

"Proxy" terimi, bir bilgisayar ağında bir cihazın, başka bir cihazın (istemci veya sunucu) yerine geçerek, bu cihazla olan iletişimi kontrol etmesini ifade eder. Proxy'ler genellikle bir ara katman (intermediary) olarak çalışır ve ağ trafiğini yönlendirirken çeşitli işlevleri yerine getirir. 
Proxy'ler, güvenlik, performans optimizasyonu, içerik filtreleme gibi çeşitli nedenlerle kullanılabilirler. İstemci ve sunucu arasında ara bir katman olarak çalıştıkları için, ağ trafiğini yönlendirme ve kontrol etme yetenekleri sağlarlar.


Load balancer (yük dengeleyici), bir bilgisayar sistemine gelen ağ trafiğini yönetmek ve dengeli bir şekilde dağıtmak amacıyla kullanılan bir cihaz veya yazılımdır. Load balancer, bir dizi sunucu arasında iş yükünü eşit bir şekilde paylaşarak sistem performansını artırır, yükü dağıtarak tek bir sunucunun üzerindeki baskıyı azaltır ve yüksek erişilebilirlik sağlar.

rest mimarisinde http bize json ya da xml gönderir. 

put ve patch farkı; bence patch daha iyi çünkü put daki gibi 1 yeri değiştirmek istersek hepsini yazmaya gerek kalmıyor sadece belirtilen değeri değiştiriyoruz. 
idempotent nedir? Safe metodlar yani get gibi metod'dur. get napıyor sadece veriyi getiriyor deği mi yani veride bir değişiklik yapmıyor. Ama post neyapıyor veride değişiklik yapıyor bu idempotent değildir işte. 

Bilgi: json formatının doğru olup olmadığını doğrulamak için JSONLINT sitesini kullanabilirsiniz. 

    CURL

GET A FILM DTEAIL (SWAPI)
curl https://swapi.dev/api/films/1/
GET POPULAR MOVIES (TMDBAPI)
curl https://api.themoviedb.org/3/movie/popular?api_key=your_api_key
GET POPULAR MOVIES (TMDBAPI) -d seçeneği ile
curl -X GET -G -d api_key=your_api_key https://api.themoviedb.org/3/movie/popular
GET A MOVIE DETAIL (TMDBAPI) -d seçeneği ile
curl -X GET -G -d api_key=your_api_key https://api.themoviedb.org/3/movie/:movie_id
GET ALL EMPLOYEES (Fake API)
curl http://localhost:3000/employees
GET AN EMPLOYEE DETAIL (Fake API)
curl http://localhost:3000/employees/:employee_id
POST AN EMPLOYEE (Fake API)
curl -X POST -H "Content-Type: application/json" -d '{ "first_name": "Ricardo", "last_name": "Quaresma", "email": "ricardo@test.tr", "gender": "Male", "roleId": 3 }' http://localhost:3000/employees
DELETE AN EMPLOYEE (Fake API)
curl -X DELETE http://localhost:3000/employees/:employee_id
UPDATE AN EMPLOYEE (Fake API) - PATCH
curl -X PATCH -H "Content-Type: application/json" -d '{ "first_name": "Ricardo", "last_name": "Quaresma"}' http://localhost:3000/employees/:employee_id
curl -X PUT -H "Content-Type: application/json" -d '{ "first_name": "Ricardo", "last_name": "Quaresma"}' http://localhost:3000/employees/:employee_id
UPDATE AN EMPLOYEE (Fake API) - PUT

promise bizde ne işe yarar bir işlemi aslında kontrol etmeyi amaçlıyor diyebiliriz. Bizim bu promise de resolve ve reject paramtereleri var resolve bizim olumlu sonuçlar için kullandığımız parametre reject de olumsuz durumlar için ama burası önemli dikkat kesilelim reject için catch ile yakalamamız gerekli resolve için de then kullanılıyor yani olumlu ise then dekileri yap gibi. Patikadaki günlük notum bu. İyi kodlamalar. Şu durumda var resolve ve reject i aynı anda kullanmaya kalkarsan ilk kullanılan geçerli olur.
await aync işlemleride aslında promise yapısı gibidir. Başka bir yazım şekli desek çok da abartı kaçmaz galiba. yani aslında işlemleri bir genel bir fonksiyonda yazıyoruz ardından bu fonksiyona diyoruz sen async sin kardeşim burası da tmm await de bu genel fonksiyonun içindeki işlemlere knk sen bi işlemini tamamla öyle devam ederiz demektir. Yani kısaca bu karışık asenkron işlemlerinde sanki senkron işlem yapıyormuşuz gibi göstermeye yarıyor yani kod okunurluğunu arttırıyor. Bu arada bu await async işlemlerinde try catch baya baya kullanılır. 


single-threaded  multi threaded  arasındaki fark nedir ?
 Single-threaded (Tek İş Parçacıklı):

Tek iş parçacığına sahip programlar sıralı bir şekilde çalışır. Yani, bir görevin tamamlanması beklenir ve ardından bir sonraki görev başlatılır.
İşlemler birbirini engelleme eğilimindedir. Eğer bir görev bir kaynağı (örneğin, bir dosyayı veya ağ bağlantısını) kullanıyorsa, diğer görevler bu kaynağa erişmeyi beklemek zorundadır.
Örneğin, JavaScript'in tarayıcıda çalışan bir uygulaması genellikle single-threaded'dir.

Multi-threaded (Çoklu İş Parçacıklı):

Çoklu iş parçacıklı programlar, aynı anda birden fazla iş parçacığını yürütebilir. Her iş parçacığı bağımsız olarak çalışabilir.
Bu, aynı anda birden fazla görevin eşzamanlı olarak yürütülmesine olanak tanır. Bu, özellikle çoklu çekirdekli işlemcilerde performans avantajı sağlar.
İş parçacıkları genellikle birbirleriyle iletişim kurabilir ve paylaşılan kaynaklara (veri yapısı, bellek alanları, vb.) erişebilir.
Çoklu iş parçacıklı programlar, genellikle paralel programlama ve eşzamanlı programlama kavramları ile ilişkilidir. Multi-threading, özellikle büyük ve karmaşık uygulamalarda performansı artırabilir, ancak iş parçacıkları arasındaki senkronizasyon ve veri paylaşımı gibi sorunları da beraberinde getirebilir. Bu nedenle, çoklu iş parçacıklı programlamayı doğru bir şekilde yönetmek önemlidir.

module kavramı da bir dosyada yapılan işlemi başka dosyalarda da kullnamk için kullnadığımız bir yapıdır.
node modules klasörü silinse bile dependencies de olan paketlerimizi npm install ile tekrar yükleyebiliriz. nice. 
